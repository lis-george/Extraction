# -*- coding: utf-8 -*-
"""extract.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18YSQuYMtujEYbndZY423XLVNvSOp4jFE
"""

!sudo apt install tesseract-ocr;
!sudo apt install libtesseract-dev;

!pip install pdfplumber
!pip install pytesseract
!pip install pillow

import pytesseract
pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'

### Basic code detection
'''
import pdfplumber
import pytesseract
from PIL import Image

# Function to determine if text might be code based on simple heuristics
def looks_like_code(text):
    keywords = ["procedure", "var", "let", "const", "if", "else", "while", "for", "class", "import", "return"]
    symbols = [":", "(", ")", ";", ":=", "=>","_"]
    lines = text.split('\n')
    if any(kw in text for kw in keywords) and any(sym in text for sym in symbols):
        return True
    semicolon_lines = sum(1 for line in lines if ";" in line)
    return semicolon_lines >= 3

# Extract text from PDF and apply OCR to images found within
def extract_text_from_pdf(file_path):
    extracted_code = []
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages:
            # Extract text directly from the page
            text = page.extract_text()
            if text and looks_like_code(text):
                extracted_code.append(text)

            # Extract and process images for OCR
            images = page.images  # This gives a list of image bounding boxes
            for img_bbox in images:
                # Calculate the bounding box coordinates
                x0, top, x1, bottom = img_bbox['x0'], img_bbox['top'], img_bbox['x1'], img_bbox['bottom']
                # Crop the image using the coordinates
                im = page.to_image().original.crop((x0, top, x1, bottom))
                # Apply OCR to the cropped image
                image_code = pytesseract.image_to_string(im)
                if looks_like_code(image_code):
                    extracted_code.append(image_code)

    return extracted_code

# Example usage
file_path = '/content/test.pdf'
code_snippets = extract_text_from_pdf(file_path)
for snippet in code_snippets:
    print("Extracted Code Snippet:", snippet)
'''

!pip install PyMuPDF

import fitz

'''
def extract_code_blocks(pdf_path):
    # Open the provided PDF file
    document = fitz.open(pdf_path)
    code_blocks = []
    in_code_block = False
    current_block = []

    # Iterate through each page of the PDF
    for page_number in range(document.page_count):
        page = document.load_page(page_number)
        text = page.get_text("text")

        # Iterate through each line in the page text
        for line in text.splitlines():
            if "procedure" in line:
                in_code_block = True
                current_block = [line]
            elif in_code_block and "end;" in line:
                current_block.append(line)
                code_blocks.append("\n".join(current_block))
                in_code_block = False
            elif in_code_block:
                current_block.append(line)

    # Close the document
    document.close()
    return code_blocks

# Path to the PDF file
pdf_path = '/content/test.pdf'
blocks = extract_code_blocks(pdf_path)

# Print the extracted code blocks
for block in blocks:
    print("Code Block:")
    print(block)
    print("-" * 80)  # Separator
'''

'''
import pdfplumber
import pytesseract
from PIL import Image

# Function to determine if text might be code based on simple heuristics
def looks_like_code(text):
    code_blocks = []
    in_code_block = False
    current_block = []
    for line in text.splitlines():
     if "procedure" in line:
       in_code_block = True
       current_block = [line]
     elif in_code_block and "end;" in line:
       current_block.append(line)
       code_blocks.append("\n".join(current_block))
       in_code_block = False
     elif in_code_block:
       current_block.append(line)





# Extract text from PDF and apply OCR to images found within
def extract_text_from_pdf(file_path):
    extracted_code = []
    with pdfplumber.open(file_path) as pdf:
        for page in pdf.pages:
            # Extract text directly from the page
            text = page.extract_text()
            if text and looks_like_code(text):
                extracted_code.append(text)
                extracted_code.append('***************************')

            # Extract and process images for OCR
            images = page.images  # This gives a list of image bounding boxes
            for img_bbox in images:
                # Calculate the bounding box coordinates
                x0, top, x1, bottom = img_bbox['x0'], img_bbox['top'], img_bbox['x1'], img_bbox['bottom']
                # Crop the image using the coordinates
                im = page.to_image().original.crop((x0, top, x1, bottom))
                # Apply OCR to the cropped image
                image_code = pytesseract.image_to_string(im)
                if looks_like_code(image_code):
                    extracted_code.append(image_code)
                    extracted_code.append('***************************')

    return extracted_code

# Example usage
file_path = '/content/test.pdf'
code_snippets = extract_text_from_pdf(file_path)
for snippet in code_snippets:
    print("Extracted Code Snippet:", snippet)
'''

'''
import pdfplumber

# Load the PDF
pdf_path = '/content/test.pdf'
pdf = pdfplumber.open(pdf_path)

# Loop through pages and extract code snippets
code_snippets = []
for page in pdf.pages:
    text = page.extract_text()
    if text:
        snippets = text.split('\n\n')
        for snippet in snippets:
            if "procedure" in snippet.lower():
                code_snippets.append(snippet.strip())

# Show the first few snippets
code_snippets[:5]
'''

'''
import pdfplumber

# Load the PDF
pdf_path = '/content/test.pdf'
pdf = pdfplumber.open(pdf_path)

# Extract code snippets containing the word 'procedure'
code_snippets = []
for page in pdf.pages:
    text = page.extract_text()
    if text:
        snippets = text.split('\n\n')
        for snippet in snippets:
            if "procedure" in snippet.lower() and "is" in snippet.lower() and "end" in snippet.lower():
                code_snippets.append(snippet.strip())

# Display the first 10 snippets
for idx, snippet in enumerate(code_snippets[:10], 1):
    print(f"Snippet {idx}:\n{snippet}\n")
'''

### Does not work

'''
import re
import pdfplumber

# Load the PDF
pdf_path = '/content/test.pdf'

# Function to extract code snippets
def extract_code_snippets(text):
    # Regular expression to find code snippets
    pattern = r'(?i)(procedure|function|service|routine)\s+[\w\s,]+\([^)]*\)\s+is.*?end\s+[\w\s]+;'
    matches = re.findall(pattern, text, re.DOTALL)
    return matches

# Extract and process the PDF
with pdfplumber.open(pdf_path) as pdf:
    # Combine all pages' text
    text = '\n'.join([page.extract_text() for page in pdf.pages if page.extract_text()])

# Extract code snippets
snippets = extract_code_snippets(text)

# Display the extracted snippets
for i, snippet in enumerate(snippets, 1):
    print(f"Snippet {i}:\n{snippet}\n")
'''

!pip install PyPDF2
pdf_path = '/content/ARINC653_P1_5_201912.pdf'

### Unformatted ouput and regex needs correction
'''
from PyPDF2 import PdfReader
import re

# Load the PDF
#pdf_path = '/mnt/data/test.pdf'
reader = PdfReader(pdf_path)

# Extract text from all pages
pdf_text = ""
for page in reader.pages:
    pdf_text += page.extract_text()

# Function to extract code snippets
def extract_code_snippets(text: str):
    pattern = re.compile(r'(procedure\s+\w+.*?end\s+\w+;)', re.DOTALL)
    snippets = pattern.findall(text)
    return snippets

# Extract code snippets
code_snippets = extract_code_snippets(pdf_text)
code_snippets[:1]
'''

import re
from PyPDF2 import PdfReader

# Function to extract code snippets
def extract_code_snippets(text: str):
    ''' works if underscore is detected properly'''
    #pattern = re.compile(r'(procedure\s+\w+\s*\(.*?\).*?\nend\s+\w+.*?\n)', re.DOTALL | re.IGNORECASE)
    ''' captures everything that starts with procedure'''
    #pattern = re.compile(r'(procedure[\s+\w+].*?\s*\(.*?\).*?\nend[\s+\w+].*?\n)', re.DOTALL | re.IGNORECASE)
    ''' captures only if capital letter after procedure'''
    pattern = re.compile(r'(procedure\s+(?:[A-Z0-9]+(?:_[A-Z]+)*(?:[_\s][A-Z]+)*|[A-Z0-9]+\s[A-Z]+(?:\s[A-Z]+)*)\n.*?\nend\s+\w+.*?\n)', re.DOTALL | re.IGNORECASE)

    snippets = pattern.findall(text)
    return snippets

# Load the PDF and extract text
#pdf_path = '/mnt/data/test.pdf'
reader = PdfReader(pdf_path)

# Combine text from all pages to ensure continuity
pdf_text = "".join([page.extract_text() for page in reader.pages])

# Extract code snippets
code_snippets = extract_code_snippets(pdf_text)
# only the first 64 are code snippets, the rest are some sort of schema
# configure error handler should be the last snippet
code_snippets = code_snippets[:67]

# Print code snippets with proper formatting
for index, snippet in enumerate(code_snippets, 1):
    print(f"Snippet {index}:\n{'-'*20}\n{snippet.strip()}\n")

# returns the snippets as a list
#code_snippets